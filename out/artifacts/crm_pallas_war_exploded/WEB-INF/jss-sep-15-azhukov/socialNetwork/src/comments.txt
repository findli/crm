Схема

Много еисправлено, но остались проблемы:

1. `activity_hier_types` - Это типы иерархичеких связей. То есть "ответ/комментарий" и "часть/вложение". У тебя там помему-то фото и пост.
2. В bean, createPost вижу столбцы/переменные типа VARCHAR(80000).
   Для длинных текстовых данных, особенно если длина значения может варьироваться в широких пределах - используй TEXT/LONGTEXT.

3. По процедурам нужно еще отдельно поговорить - особенно по тем, что связаны с иерерархией и дружбой


DAO

1. Внутри dao не должно быть списков записей, загруженных из БД
   Исключение - только если список можно получить из БД один раз а потом многкратно использовать в пределах ОДНОГО http-запроса.
   Между http-запросами мы данные в dao не должны хранить.
   Может быть что-то будем хранить в сессии.

   Поэтому весь интерфейс dao выстраиваем как прямое обращение к данным, без буфера в памяти, т.е. не будет методов refresh()


6.02/16
_______________

1. Процедуры:
   - добавление разных activity ( в т.ч. проверка на корректность записей activity_hier)

2. Тег для итерации по entry

3. View для получения "ленты новостей" DAO к ней.

4. dbcp:

4.1  META-INF/context.xml

   <Context path="/">
       <Resource name="jdbc/salesdept" auth="Container"
                 type="javax.sql.DataSource"
                 maxActive="100" maxIdle="30" maxWait="10000"
                 username="root"
                 password="1234"
                 driverClassName="com.mysql.jdbc.Driver"
                 url="jdbc:mysql://localhost:3306/salesdept?useUnicode=yes&amp;characterEncoding=UTF-8"
                 factory="org.apache.tomcat.jdbc.pool.DataSourceFactory" />
   </Context>

4.2 web.xml

    <resource-ref>
        <!--DB Connection-->
        <res-ref-name>jdbc/salesdept</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

4.3 servlet

public class ConnectionPoolServlet extends HttpServlet {

    DataSource dataSource = null;

    @Override
    public void init() throws ServletException {
        super.init();

        InitialContext initialContext = null;

        try {
            initialContext = new InitialContext();
            dataSource = (DataSource) initialContext.lookup("java:comp/env/jdbc/salesdept");
        } catch (NamingException e) {
            e.printStackTrace();
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {


        Connection conn = null;
        PreparedStatement stmt = null;

        try {

            conn = dataSource.getConnection();
            // stmt = conn.prepareStatement(...);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (conn!=null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }


    }
}




JAAS

Authentication
Authorization

Password hashing  (MD5,SHA-512) Provider  Rainbow tables